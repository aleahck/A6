open Deck
open Card
open Gamelogic

type player = {
    stake: int;
    mutable cards: card list option;
    amount_in: int
  }

type id = int

type game= {
    flop: card list;
    bet: int;
    pot: int;
    players: id*player list;
    deck: deck;
    first_better:id list
  }

let current_player (g:game) = snd (List.hd g.players)

let get_current_id (g:game) = fst (List.hd g.players)

(*[do_player_bet p i] removes [i] from [p]'s stake and adds it to [p]'s
*amount_in. Returns a new, updated player generated by these actions.*)
let do_player_raise (g:game) (p:player) (i: int)=
  let difference= g.bet - p.amount_in in
  {stake= p.stake- (difference+ i);
   cards= p.cards;
   amount_in= p.amount_in + (difference+i)
  }

let do_raise (g:game) (i:int)=
  let new_player= do_player_raise g (current_player g) i in
  let p_id = get_player_id g in
  let new_players= List.tl (g.players)@[(p_id,new_player)] in
  let new_pot= g.pot+ (g.bet-(current_player g).amount_in)+i in
  {flop= g.flop;
   bet= g.bet+i;
   pot= new_pot;
   players= new_players;
   deck= g.deck;
   first_better= g.first_better
  }

let is_valid_bet (i:int) (g:game) =
  if i > (current_player g).stake then false
  else if i < g.bet then false
  else if (* implement blind rules *)
  else return true

let call (g:game) =
  do_raise g 0

let check (g:game) =
  { g with players = (List.tl g.players)@[(get_current_id),(current_player g)] }

(* Helper for fold and dealer. Creates new hand on the turn a player folds. *)
let new_hand (g:game) =
  let fst_player= snd (List.hd g.players) in
  let fst_id= fst (List.hd g.players) in
  let snd_player_original = snd (List.nth g.players 1) in
  let snd_id= fst (List.nth g.players 1) in
  let snd_player= snd_player_original with stake= 
					     snd_player_original.stake+g.pot in
  let new_start= List.nth g.first_better 1 in
  if (new_start=fst_id) then
    {flop= [];
     bet=0;
     pot=0;
     players= [(fst_id,fst_player);(snd_id,snd)player)];
     deck= Deck.rand_deck();
     first_better= (List.tl g.first_better)@ [List.hd g.first_better]
  }
  else
    {flop = [];
     bet = 0;
     pot = 0;
     players = [(snd_id,snd_player);(fst_id,fst_player)];
     deck = Deck.rand_deck();
     first_better = (List.tl g.first_better)@[List.hd g.first_better] }


(* Only works for 2 players; only ends the hand instead of continuing hand
  without player who folded. *)
let fold (g:game) =
  new_hand g


(* Only works for 2 players. For multiple players, must be able to take player
  out of queue and continue game. Also need to work on blinds values. *)
let dealer (g:game) =
  let big_blind = List.hd g.first_better in
  let small_blind = List.nth g.first_better 1 in
  if !(List.for_all
    (fun x -> if x = big_blind then x.stake > 2
      else if x = small_blind then x.stake > 1
      else x.stake > 0)
    (g.players)) then None else
  Some (new_hand g)


(* Helper function for new_game. *)
let new_player () =
  {stake = 200; (* arbitrary *)
  cards = None
  amount_in = 0}


(* Only works if Deck.top2_cards returns (card list * deck) *)
let deal_two (p:player) (d:deck) =
  p.cards <- Some (fst (Deck.top2_cards d)) ;
  snd (Deck.top2_cards d)


let new_game () =
  let helper =
  { flop = [];
  bet = 0;
  pot = 0;
  players = (new_player())@[new_player()]
  deck = Deck.rand_deck();
  first_better = (List.tl g.first_better)@(List.hd g.first_better) } in

  let d1 = deal_two (List.hd helper.players) (helper.deck) in
  let d2 = deal_two (List.nth helper.players 1) (d1) in
  {helper with deck = d2}




