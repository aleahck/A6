open Deck
open Card
open Gamelogic

type player= {
    stake: int;
    cards: card * card;
    amount_in: int
  }

type game= {
    flop: card list;
    bet: int;
    pot: int;
    players: player list;
    deck: deck;
    first_better: player
  }

(*[do_player_bet p i] removes [i] from [p]'s stake and adds it to [p]'s
*amount_in. Returns a new, updated player generated by these actions.*)
let do_player_bet (p:player) (i: int)=
  {stake= p.stake-i;
   cards= p.cards;
   amount_in= p.amount_in+i
  }

let do_raise (g:game) (i:int)=
  let new_player= do_player_bet (List.hd (g.players)) i in
  let new_players= List.tl (g.players)@[new_player] in
  {flop= g.flop;
   bet= g.bet+i;
   pot= g.pot+ (g.bet+i);
   players= new_players;
   deck= g.deck
  }
